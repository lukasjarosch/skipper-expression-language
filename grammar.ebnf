grammar = value_expression | path_expression ;

(*
The SEL has two core expression types: value and path.
Both expressions produce a value, only the semantics changes.
*)

value_expression = "${" , ( identifier | call ) , "}" ;
path_expression = "${" , path , "}" ;

(*
Paths are identifiers or any other value created by a value_expression,
which are separated by a colon ':'.
Paths without a colon are not valid.
*)
path = ( identifier | value_expression ) ,
  { ":" , ( identifier | value_expression ) }- ;

call = identifier , "(" , parameterList , ")" ;

parameterList =
  [ identifier
  | terminal
  | value_expression
  | path_expression
  | path
  ] , { "," ,
  ( identifier
  | terminal
  | value_expression
  | path_expression
  | path
  ) } ;

identifier = letter , { letter | digit | "_" } ;

terminal
  = "'" , character , { character } , "'"
  | '"' , character , { character } , '"'
  ;

character = letter | digit | symbol | "_" ;

letter
  = "A" | "B" | "C" | "D" | "E" | "F" | "G"
  | "H" | "I" | "J" | "K" | "L" | "M" | "N"
  | "O" | "P" | "Q" | "R" | "S" | "T" | "U"
  | "V" | "W" | "X" | "Y" | "Z" | "a" | "b"
  | "c" | "d" | "e" | "f" | "g" | "h" | "i"
  | "j" | "k" | "l" | "m" | "n" | "o" | "p"
  | "q" | "r" | "s" | "t" | "u" | "v" | "w"
  | "x" | "y" | "z"
  ;

digit
  = "0" | "1" | "2" | "3" | "4" | "5" | "6"
  | "7" | "8" | "9"
  ;

symbol
  = "[" | "]" | "{" | "}" | "(" | ")" | "<"
  | ">" | "'" | '"' | "=" | "|" | "." | ","
  | ";"
  ;
